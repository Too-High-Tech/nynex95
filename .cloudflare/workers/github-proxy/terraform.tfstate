{
  "version": 4,
  "terraform_version": "0.13.0",
  "serial": 42,
  "lineage": "da6ba550-019d-f305-a0a3-9a5bf3ef8484",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "cloudflare_worker_script",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/terraform-providers/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "/**\n * Proxies requests to the github API through cloudflare.\n *\n * @TODO: Perform OAuth Secret Exchange.\n */\n\naddEventListener('fetch', event =\u003e {\n\tconst result = handleRequest(event.request);\n\n\tevent.waitUntil(result);\n\tevent.respondWith(result);\n\n})\n\nasync function handleRequest(request) {\n\tconst originalUrl = new URL(request.url);\n\tconst githubUrl   = 'https://api.github.com' + originalUrl.pathname;\n\n\tconst headers = new Headers(request.headers);\n\n\theaders.append('User-Agent',    'node.js');\n\theaders.append('Cache-Control', 'no-cache');\n\theaders.append('pragma',        'no-cache');\n\n\treturn fetch(githubUrl, {headers}).then(response =\u003e {\n\n\t\treturn new Promise(accept =\u003e {\n\t\t\tresponse.text().then(responseText =\u003e {\n\t\t\t\taccept({response, responseText})\n\t\t\t});\n\t\t});\n\n\t}).then(({response, responseText}) =\u003e {\n\n\t\tconst headers = new Headers(response.headers);\n\t\tconst rawBody = responseText.replace(/api\\.github\\.com/g, originalUrl.host);\n\n\t\tif(originalUrl.searchParams.get('api') == 'json-source')\n\t\t{\n\t\t\theaders.append('Content-Type',  'text/event-stream');\n\t\t\theaders.append('Cache-Control', 'no-cache');\n\t\t\theaders.append('Connection',    'keep-alive');\n\n\t\t\theaders.append('Access-Control-Allow-Origin', '*');\n\t\t\theaders.append('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n\n\t\t\tconst { readable, writable } = new TransformStream();\n\t\t\tconst writer = writable.getWriter();\n\t\t\tconst encoder = new TextEncoder();\n\n\t\t\tconst parsedBody = JSON.parse(rawBody);\n\n\t\t\tif(Array.isArray(parsedBody))\n\t\t\t{\n\t\t\t\twriter.write(encoder.encode('data: ' + JSON.stringify({count:parsedBody.length}) + '\\n\\n'));\n\n\t\t\t\tfor(const line of parsedBody)\n\t\t\t\t{\n\t\t\t\t\twriter.write(encoder.encode('data: ' + JSON.stringify(line) + '\\n\\n'));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\twriter.write(encoder.encode('data: ' + rawBody + '\\n\\n'));\n\t\t\t}\n\n\t\t\treturn new Response(readable, {\n\t\t\t\t'status':       200\n\t\t\t\t, 'statusText': 'ok'\n\t\t\t\t, 'headers':     headers\n\t\t\t});\n\t\t}\n\n\t\treturn new Response(rawBody, {headers:response.headers});\n\t});\n}\n",
            "id": "github-proxy",
            "kv_namespace_binding": [
              {
                "name": "PROXY_KV",
                "namespace_id": "ac0769171dec4164bda16cc7811b1bc8"
              }
            ],
            "name": "github-proxy",
            "plain_text_binding": [],
            "secret_text_binding": []
          },
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_workers_kv_namespace.github-proxy-kv"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_workers_kv_namespace",
      "name": "github-proxy-kv",
      "provider": "provider[\"registry.terraform.io/terraform-providers/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "ac0769171dec4164bda16cc7811b1bc8",
            "title": "github-proxy-kv"
          },
          "private": "bnVsbA=="
        }
      ]
    }
  ]
}
